{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\beesn\\\\Desktop\\\\VSCode-Projects\\\\Animal-Adoption\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport class ApiServiceService {\n  constructor() {\n    this.items = [];\n  }\n\n  search(postalcode, distance) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch('https://api.rescuegroups.org/v5/public/orgs/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/vnd.api+json',\n          'Authorization': 'yQf20ay8'\n        },\n        body: JSON.stringify({\n          data: {\n            'filterRadius': {\n              'postalcode': postalcode,\n              'miles': distance\n            }\n          }\n        })\n      });\n      const result = yield response.json();\n      _this.items = result.data;\n      console.log(_this.items);\n\n      _this.sortArray(_this.items);\n\n      console.log(_this.items);\n    })();\n  }\n\n  sortArray(array) {\n    let newArray = [];\n    let smallestItem;\n    let largestItemIndex = 0;\n\n    do {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i].attributes.distance > array[largestItemIndex].attributes.distance) {\n          largestItemIndex = i;\n        }\n      }\n\n      newArray.unshift(array[largestItemIndex]);\n      array.splice(largestItemIndex, 1);\n    } while (array.length > 0);\n\n    if (array.length == 0) {\n      array = newArray;\n    }\n  }\n\n}\n\nApiServiceService.ɵfac = function ApiServiceService_Factory(t) {\n  return new (t || ApiServiceService)();\n};\n\nApiServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiServiceService,\n  factory: ApiServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/beesn/Desktop/VSCode-Projects/Animal-Adoption/src/app/api-service.service.ts"],"names":["i0","ApiServiceService","constructor","items","search","postalcode","distance","response","fetch","method","headers","body","JSON","stringify","data","result","json","console","log","sortArray","array","newArray","smallestItem","largestItemIndex","i","length","attributes","unshift","splice","ɵfac","ApiServiceService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,EAAb;AACH;;AACKC,EAAAA,MAAM,CAACC,UAAD,EAAaC,QAAb,EAAuB;AAAA;;AAAA;AAC/B,YAAMC,QAAQ,SAASC,KAAK,CAAC,oDAAD,EAAuD;AAC/EC,QAAAA,MAAM,EAAE,MADuE;AAE/EC,QAAAA,OAAO,EAAE;AACL,0BAAgB,0BADX;AAEL,2BAAiB;AAFZ,SAFsE;AAM/EC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,UAAAA,IAAI,EAAE;AACF,4BAAgB;AACZ,4BAAcT,UADF;AAEZ,uBAASC;AAFG;AADd;AADW,SAAf;AANyE,OAAvD,CAA5B;AAeA,YAAMS,MAAM,SAASR,QAAQ,CAACS,IAAT,EAArB;AACA,MAAA,KAAI,CAACb,KAAL,GAAaY,MAAM,CAACD,IAApB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAACf,KAAjB;;AACA,MAAA,KAAI,CAACgB,SAAL,CAAe,KAAI,CAAChB,KAApB;;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAACf,KAAjB;AApB+B;AAqBlC;;AACDgB,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,YAAJ;AACA,QAAIC,gBAAgB,GAAG,CAAvB;;AACA,OAAG;AACC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,YAAIJ,KAAK,CAACI,CAAD,CAAL,CAASE,UAAT,CAAoBpB,QAApB,GAA+Bc,KAAK,CAACG,gBAAD,CAAL,CAAwBG,UAAxB,CAAmCpB,QAAtE,EAAgF;AAC5EiB,UAAAA,gBAAgB,GAAGC,CAAnB;AACH;AACJ;;AACDH,MAAAA,QAAQ,CAACM,OAAT,CAAiBP,KAAK,CAACG,gBAAD,CAAtB;AACAH,MAAAA,KAAK,CAACQ,MAAN,CAAaL,gBAAb,EAA+B,CAA/B;AACH,KARD,QAQSH,KAAK,CAACK,MAAN,GAAe,CARxB;;AASA,QAAIL,KAAK,CAACK,MAAN,IAAgB,CAApB,EAAuB;AACnBL,MAAAA,KAAK,GAAGC,QAAR;AACH;AACJ;;AA1C0B;;AA4C/BpB,iBAAiB,CAAC4B,IAAlB,GAAyB,SAASC,yBAAT,CAAmCC,CAAnC,EAAsC;AAAE,SAAO,KAAKA,CAAC,IAAI9B,iBAAV,GAAP;AAAwC,CAAzG;;AACAA,iBAAiB,CAAC+B,KAAlB,GAA0B,aAAchC,EAAE,CAACiC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEjC,iBAAT;AAA4BkC,EAAAA,OAAO,EAAElC,iBAAiB,CAAC4B,IAAvD;AAA6DO,EAAAA,UAAU,EAAE;AAAzE,CAAtB,CAAxC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nexport class ApiServiceService {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n    async search(postalcode, distance) {\r\n        const response = await fetch('https://api.rescuegroups.org/v5/public/orgs/search', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/vnd.api+json',\r\n                'Authorization': 'yQf20ay8'\r\n            },\r\n            body: JSON.stringify({\r\n                data: {\r\n                    'filterRadius': {\r\n                        'postalcode': postalcode,\r\n                        'miles': distance\r\n                    }\r\n                }\r\n            })\r\n        });\r\n        const result = await response.json();\r\n        this.items = result.data;\r\n        console.log(this.items);\r\n        this.sortArray(this.items);\r\n        console.log(this.items);\r\n    }\r\n    sortArray(array) {\r\n        let newArray = [];\r\n        let smallestItem;\r\n        let largestItemIndex = 0;\r\n        do {\r\n            for (let i = 0; i < array.length; i++) {\r\n                if (array[i].attributes.distance > array[largestItemIndex].attributes.distance) {\r\n                    largestItemIndex = i;\r\n                }\r\n            }\r\n            newArray.unshift(array[largestItemIndex]);\r\n            array.splice(largestItemIndex, 1);\r\n        } while (array.length > 0);\r\n        if (array.length == 0) {\r\n            array = newArray;\r\n        }\r\n    }\r\n}\r\nApiServiceService.ɵfac = function ApiServiceService_Factory(t) { return new (t || ApiServiceService)(); };\r\nApiServiceService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ApiServiceService, factory: ApiServiceService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}